document.addEventListener('DOMContentLoaded', function () {
    const countdownElements = document.querySelectorAll('.sale-countdown-timer');

    countdownElements.forEach(el => {
        const startTimeStr = el.dataset.startTime;
        const endTimeStr = el.dataset.endTime;

        const startTime = startTimeStr ? new Date(startTimeStr) : null;
        const endTime = endTimeStr ? new Date(endTimeStr) : null;

        const updateCountdown = () => {
            const now = new Date();
            const diff = endTime - now;

            // N·∫øu ch∆∞a c√≥ endTime, kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£
            if (!endTime) {
                el.textContent = '';
                clearInterval(el.timer);
                return;
            }

            // N·∫øu ch∆∞a t·ªõi startTime (n·∫øu c√≥)
            if (startTime && now < startTime) {
                el.textContent = '';
                return;
            }

            // N·∫øu ƒë√£ h·∫øt h·∫°n
            if (now >= endTime) {
                el.textContent = 'ƒê√£ k·∫øt th√∫c';
                clearInterval(el.timer);
                return;
            }

            const totalSeconds = Math.floor(diff / 1000);
            const days = Math.floor(totalSeconds / (3600 * 24));
            const hours = Math.floor((totalSeconds % (3600 * 24)) / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;

            if (days > 0) {
                el.textContent = `C√≤n ${String(days).padStart(2, '0')} ng√†y ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            } else if (hours > 0) {
                el.textContent = `C√≤n ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            } else {
                el.textContent = `C√≤n ${String(minutes).padStart(2, '0')} ph√∫t ${String(seconds).padStart(2, '0')} gi√¢y`;
            }
        };

        // L∆∞u timer ƒë·ªÉ c√≥ th·ªÉ clear sau
        updateCountdown();
        el.timer = setInterval(updateCountdown, 1000);
    });

    const countdownSingleProduct = document.querySelectorAll('.product-sale-countdown-timer');

    countdownSingleProduct.forEach(el => {
        const startTimeStr = el.dataset.startTime;
        const endTimeStr = el.dataset.endTime;

        const startTime = startTimeStr ? new Date(startTimeStr) : null;
        const endTime = endTimeStr ? new Date(endTimeStr) : null;

        const updateCountdown = () => {
            const now = new Date();
            const diff = endTime - now;

            // N·∫øu ch∆∞a c√≥ endTime, kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£
            if (!endTime) {
                el.textContent = '';
                clearInterval(el.timer);
                return;
            }

            // N·∫øu ch∆∞a t·ªõi startTime (n·∫øu c√≥)
            if (startTime && now < startTime) {
                el.textContent = '';
                return;
            }

            // N·∫øu ƒë√£ h·∫øt h·∫°n
            if (now >= endTime) {
                el.textContent = 'ƒê√£ k·∫øt th√∫c';
                clearInterval(el.timer);
                return;
            }

            const totalSeconds = Math.floor(diff / 1000);
            const days = Math.floor(totalSeconds / (3600 * 24));
            const hours = Math.floor((totalSeconds % (3600 * 24)) / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;

            if (days > 0) {
                el.textContent = `üí•K·∫øt th√∫c sau ${String(days).padStart(2, '0')} ng√†y ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            } else if (hours > 0) {
                el.textContent = `üí•K·∫øt th√∫c sau ${String(hours).padStart(2, '0')} gi·ªù ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            } else {
                el.textContent = `üí•K·∫øt th√∫c sau ${String(minutes).padStart(2, '0')} ph√∫t ${String(seconds).padStart(2, '0')} gi√¢y`;
            }
        };

        // L∆∞u timer ƒë·ªÉ c√≥ th·ªÉ clear sau
        updateCountdown();
        el.timer = setInterval(updateCountdown, 1000);
    });
});